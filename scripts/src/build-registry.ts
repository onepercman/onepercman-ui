import { dirname, join } from "path";

import { findUpSync } from "find-up";
import { outputFile, remove } from "fs-extra";
import { Project } from "ts-morph";

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const root = dirname(findUpSync("pnpm-lock.yaml")!);
process.chdir(join(root, "packages", "ui"));

const project = new Project({});
project.addSourceFilesAtPaths("src/**/*.tsx");

const sourceFiles = project.getSourceFiles();

// ----------------------------------------------------------------------------
// Build __registry__/index.tsx.
// ----------------------------------------------------------------------------
type ComponentRegistry = Record<
  string,
  Record<
    string,
    {
      name: string;
      component: string;
      file: string;
    }
  >
>;

function generateNested(registry: ComponentRegistry): string {
  let nestedStory = "{\n";
  for (const component in registry) {
    nestedStory += `  "${component}": {\n`;
    for (const variant in registry[component]) {
      const entry = registry[component][variant];
      nestedStory += `    "${variant}": {\n`;
      nestedStory += `      name: "${entry.name}",\n`;
      nestedStory += `      component: ${entry.component},\n`;
      nestedStory += `      file: "${entry.file}"\n`;
      nestedStory += "    },\n";
    }
    nestedStory += "  },\n";
  }
  nestedStory += "}";
  return nestedStory;
}

const buildRegistryIndex = async () => {
  const registry: ComponentRegistry = {};

  sourceFiles.forEach((file) => {
    const component = file.getBaseNameWithoutExtension();
    if (!component) {
      console.log("Component not found");
      return;
    }

    if (!registry[component]) {
      registry[component] = {};
    }

    registry[component]["default"] = {
      name: component,
      component: `React.lazy(() => import("@/registry/${component}"))`,
      file: `registry/${component}.tsx`,
    };
  });

  const index = `/* eslint-disable prettier/prettier */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

type ComponentRegistry = Record<
  string,
  Record<
    string,
    {
      name: string
      component: string
      file: string
    }
  >
>

export const Index: ComponentRegistry = ${generateNested(registry)};
`;

  const outPath = join(root, "packages", "ui", "__registry__", "index.tsx");
  await remove(outPath);
  await outputFile(outPath, index);
};

// ----------------------------------------------------------------------------
// Build registry/[component].tsx.
// ----------------------------------------------------------------------------

const copyComponents = async () => {
  const registryDir = join(root, "packages", "ui", "registry");
  await remove(registryDir);

  await Promise.all(
    sourceFiles.map(async (file) => {
      const component = file.getBaseNameWithoutExtension();
      if (!component) {
        console.log("Component baseName not found");
        return;
      }

      let fileContents = file.getText();
      fileContents = fileContents.replace(/\n$/, "").replace("../lib", "@/lib");
      const newPath = join(registryDir, `${component}.tsx`);

      await outputFile(newPath, fileContents);
    })
  );
};

// ----------------------------------------------------------------------------
// Run
// ----------------------------------------------------------------------------

buildRegistryIndex().catch((err) => {
  console.error(err.message);
  process.exit(1);
});

copyComponents().catch((err) => {
  console.error(err.message);
  process.exit(1);
});

console.log("âœ… Done!");
