{
  "name": "select.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/select.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui/tree/main",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "select.tsx",
      "content": "// onepercman-ui\n// https://github.com/onepercman/onepercman-ui\n\"use client\"\n\nimport {\n  Select as BaseSelect,\n  CollectionItem,\n  SelectRootProps,\n} from \"@ark-ui/react\"\nimport React from \"react\"\nimport {\n  ComponentMetadata,\n  ComposedTVProps,\n  createComponentFactory,\n  createComponentTree,\n} from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\n\nexport const select = tv({\n  base: \"\",\n  slots: {\n    trigger: \"data-[placeholder-shown]:text-secondary\",\n    valueText: \"grow text-left\",\n    clearTrigger: \"text-secondary\",\n    indicator: \"text-secondary\",\n    content: [\n      \"flex w-full flex-col overflow-hidden rounded bg-component p-2 shadow-lg\",\n      \"data-[state=open]:animate-in\",\n      \"data-[state=open]:fade-in\",\n      \"data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out\",\n    ],\n    itemGroup: \"flex flex-col\",\n    itemGroupLabel: \"w-full px-2 py-1 text-xs text-secondary\",\n    item: [\n      \"relative inline-flex cursor-pointer select-none items-start justify-between gap-2 rounded py-2 pl-3 pr-8 font-medium hover:bg-foreground/5\",\n      \"data-[state=checked]:text-primary\",\n      \"data-[disabled]:cursor-not-allowed data-[disabled]:text-muted\",\n    ],\n    itemText: \"grow\",\n    itemIndicator:\n      \"absolute right-2 top-0 h-full items-center text-xs text-primary data-[state=checked]:flex\",\n  },\n  variants: {\n    size: {\n      xs: { item: \"py-1 text-xs\" },\n      sm: { item: \"py-1 text-sm\" },\n      md: { item: \"text-base\" },\n      lg: { item: \"text-lg\" },\n    },\n    invalid: {\n      true: {\n        label: \"text-error\",\n        trigger: \"border-2 border-error bg-error/10 !text-error\",\n      },\n    },\n  },\n  defaultVariants: { size: \"md\" },\n})\n\nconst { withRoot, withSlot } = createComponentFactory(select)\n\nconst Root = withRoot(BaseSelect.Root, \"base\")\nconst RootProvider = withRoot(BaseSelect.RootProvider, \"base\")\nconst Context = withSlot(BaseSelect.Context)\nconst ItemContext = withSlot(BaseSelect.ItemContext)\nconst Label = withSlot(BaseSelect.Label)\nconst Control = withSlot(BaseSelect.Control)\nconst Trigger = withSlot(BaseSelect.Trigger, \"trigger\")\nconst ValueText = withSlot(BaseSelect.ValueText, \"valueText\")\nconst ClearTrigger = withSlot(BaseSelect.ClearTrigger, \"clearTrigger\")\nconst Indicator = withSlot(BaseSelect.Indicator, \"indicator\")\nconst HiddenSelect = withSlot(BaseSelect.HiddenSelect)\nconst Positioner = withSlot(BaseSelect.Positioner)\nconst List = withSlot(BaseSelect.List)\nconst Content = withSlot(BaseSelect.Content, \"content\")\nconst ItemGroup = withSlot(BaseSelect.ItemGroup, \"itemGroup\")\nconst ItemGroupLabel = withSlot(BaseSelect.ItemGroupLabel, \"itemGroupLabel\")\nconst Item = withSlot(BaseSelect.Item, \"item\")\nconst ItemText = withSlot(BaseSelect.ItemText, \"itemText\")\nconst ItemIndicator = withSlot(BaseSelect.ItemIndicator, \"itemIndicator\")\n\nexport interface SelectProps<T extends CollectionItem>\n  extends SelectRootProps<T>,\n    ComposedTVProps<typeof select> {}\n\nexport interface Select extends ComponentMetadata {\n  <T extends CollectionItem>(\n    props: SelectProps<T> & React.RefAttributes<Select>,\n  ): JSX.Element\n}\n\nfunction _bootstrap<T extends CollectionItem>(\n  render: (\n    props: SelectProps<T>,\n    ref: React.ForwardedRef<React.ElementRef<typeof Root>>,\n  ) => React.ReactElement | null,\n) {\n  return React.forwardRef<React.ElementRef<typeof Root>, SelectProps<T>>(\n    render,\n  ) as unknown as Select\n}\n\nconst CustomRoot = _bootstrap(function (\n  { children, positioning, ...props },\n  ref,\n) {\n  return (\n    <Root\n      ref={ref}\n      positioning={{ sameWidth: true, ...positioning }}\n      unmountOnExit\n      {...props}\n    >\n      {children}\n      <HiddenSelect />\n    </Root>\n  )\n})\n\nconst CustomContent = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  React.ComponentPropsWithoutRef<typeof Content>\n>(function ({ children, ...props }, ref) {\n  return (\n    <Positioner>\n      <Content ref={ref} {...props}>\n        {children}\n      </Content>\n    </Positioner>\n  )\n})\n\nCustomContent.displayName = \"Content\"\n\nexport const Select = createComponentTree(CustomRoot, {\n  Root: Root as Select,\n  RootProvider,\n  Context,\n  ItemContext,\n  Label,\n  Control,\n  Trigger,\n  ValueText,\n  ClearTrigger,\n  Indicator,\n  HiddenSelect,\n  Positioner,\n  List,\n  Content: CustomContent,\n  ItemGroup,\n  ItemGroupLabel,\n  Item,\n  ItemText,\n  ItemIndicator,\n})\n\nSelect.displayName = \"Select\"\n"
    }
  ]
}