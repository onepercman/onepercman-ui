{
  "name": "input.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/input.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "input.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { HiEye, HiEyeOff } from \"react-icons/hi\"\nimport { LuX } from \"react-icons/lu\"\nimport { cn, ComposedTVProps, forwardRef } from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\nimport { useComposedRefs } from \"use-composed-refs\"\n\nexport const input = tv({\n  base: [\n    \"inline-flex cursor-text items-center gap-2 overflow-hidden text-ellipsis rounded border-2 border-transparent px-2 transition-all focus-within:border-primary\",\n    \"h-[var(--input-size)] min-h-[var(--input-size)] min-w-[var(--input-size)] px-2 text-xs\",\n  ],\n  slots: {\n    input: [\n      \"h-full grow self-stretch overflow-hidden text-ellipsis border-transparent bg-transparent p-0\",\n      \"placeholder:text-muted autofill:[-webkit-background-clip:text] focus:outline-none focus:ring-transparent\",\n    ],\n    addonBefore: \"rounded-r-none\",\n    addonAfter: \"rounded-l-none\",\n  },\n  variants: {\n    size: {\n      xs: \"px-2 text-xs [--input-size:1.25rem]\",\n      sm: \"px-2 text-sm [--input-size:1.5rem]\",\n      md: \"px-4 text-sm [--input-size:2.25rem]\",\n      lg: \"px-4 [--input-size:2.75rem]\",\n    },\n    variant: {\n      filled: \"bg-default\",\n      outlined: \"border-line\",\n      blur: \"bg-default/20 backdrop-blur\",\n    },\n    invalid: {\n      true: {\n        base: \"border-2 border-error bg-error/10 text-error focus-within:border-error-600\",\n      },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n    variant: \"outlined\",\n  },\n})\n\nexport interface InputFieldProps {\n  prefix?: React.ReactNode | React.ReactElement\n  suffix?: React.ReactNode | React.ReactElement\n  addonBefore?: React.ReactNode | React.ReactElement\n  addonAfter?: React.ReactNode | React.ReactElement\n  clearable?: boolean\n  transform?(value: string): string\n}\n\nexport interface InputProps\n  extends InputFieldProps,\n    ComposedTVProps<typeof input> {}\n\nexport const Input = forwardRef<\"input\", InputProps>(\n  (\n    {\n      as: Component = \"input\",\n      prefix,\n      suffix,\n      addonBefore,\n      addonAfter,\n      size,\n      variant,\n      invalid,\n      clearable,\n      onChange,\n      transform,\n      className,\n      classNames,\n      ...props\n    },\n    ref,\n  ) => {\n    const styles = input({ size, variant, invalid })\n\n    const internalRef = React.useRef<HTMLInputElement>(null)\n    const composedRef = useComposedRefs(ref, internalRef)\n\n    const [showClear, setShowClear] = React.useState(false)\n    const [showPassword, setShowPassword] = React.useState(false)\n\n    function getTogglePassword() {\n      if (props.type === \"password\") {\n        if (showPassword) {\n          return (\n            <HiEye\n              className=\"ml-2\"\n              onClick={() => {\n                if (internalRef.current) {\n                  internalRef.current.type = \"password\"\n                  setShowPassword(false)\n                }\n              }}\n            />\n          )\n        }\n        return (\n          <HiEyeOff\n            className=\"ml-2 text-secondary\"\n            onClick={() => {\n              if (internalRef.current) {\n                internalRef.current.type = \"text\"\n                setShowPassword(true)\n              }\n            }}\n          />\n        )\n      }\n    }\n\n    function getClear() {\n      if (showClear && clearable) {\n        return (\n          <LuX\n            className=\"cursor-pointer text-secondary\"\n            onClick={function () {\n              if (internalRef.current) {\n                setShowClear(false)\n                internalRef.current.value = \"\"\n                const currentTarget = internalRef.current.cloneNode(true)\n                const event = Object.create(new Event(\"change\"), {\n                  target: { value: currentTarget },\n                  currentTarget: { value: currentTarget },\n                })\n                if (onChange) onChange(event)\n              }\n            }}\n          />\n        )\n      }\n    }\n\n    function handleChange(ev: React.ChangeEvent<HTMLInputElement>) {\n      if (transform && internalRef.current) {\n        internalRef.current.value = transform(internalRef.current.value)\n      }\n      if (onChange) onChange(ev)\n      setShowClear(!!ev.target.value)\n    }\n\n    function _renderPrefix() {\n      const element = prefix as React.ReactElement\n      if (!element) return null\n\n      if (typeof element === \"object\" && \"type\" in element)\n        return React.cloneElement(element)\n      return <span>{element}</span>\n    }\n\n    function _renderSuffix() {\n      const element = suffix as React.ReactElement\n      if (!element) return null\n      if (typeof element === \"object\" && \"type\" in element)\n        return React.cloneElement(element)\n      return <span>{element}</span>\n    }\n\n    function _renderAddonBefore() {\n      const element = addonBefore as React.ReactElement\n      if (!element) return null\n      if (typeof element === \"object\" && \"type\" in element)\n        return React.cloneElement(element, {\n          className: styles.addonBefore({\n            className: element.props.className,\n            class: classNames?.addonBefore,\n          }),\n        })\n      return (\n        <span\n          className={styles.addonBefore({ class: classNames?.addonBefore })}\n        >\n          {element}\n        </span>\n      )\n    }\n\n    function _renderAddonAfter() {\n      const element = addonAfter as React.ReactElement\n      if (!element) return null\n      if (typeof element === \"object\" && \"type\" in element)\n        return React.cloneElement(element, {\n          className: styles.addonAfter({\n            className: element.props.className,\n            class: classNames?.addonAfter,\n          }),\n        })\n      return (\n        <span className={styles.addonAfter({ class: classNames?.addonAfter })}>\n          {element}\n        </span>\n      )\n    }\n\n    return (\n      <label\n        role=\"input\"\n        className={styles.base({\n          className: cn(className, classNames?.base, {\n            \"pl-0\": !!addonBefore,\n            \"pr-0\": !!addonAfter,\n          }),\n        })}\n      >\n        {_renderAddonBefore()}\n        {_renderPrefix()}\n        <Component\n          ref={composedRef}\n          onChange={handleChange}\n          className={styles.input({ class: classNames?.input })}\n          {...props}\n        />\n        {getClear()}\n        {getTogglePassword()}\n        {_renderSuffix()}\n        {_renderAddonAfter()}\n      </label>\n    )\n  },\n)\n\nInput.displayName = \"Input\"\n\nexport default Input\n"
    }
  ]
}