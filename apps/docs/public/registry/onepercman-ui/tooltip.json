{
  "name": "tooltip.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/tooltip.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "tooltip.tsx",
      "content": "\"use client\"\n\nimport { Tooltip as BaseTooltip } from \"@ark-ui/react\"\nimport React from \"react\"\nimport {\n  ComponentMetadata,\n  ComposedTVProps,\n  createComponentFactory,\n  createComponentTree,\n} from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\n\nexport const tooltip = tv({\n  slots: {\n    content: [\n      \"z-[var(--z-index)] rounded border border-line bg-component px-3 py-2 shadow-lg\",\n      \"data-[state=open]:animate-in\",\n      \"data-[state=open]:fade-in\",\n      \"data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out\",\n    ],\n    arrow: \"\",\n    arrowTip: \"border-l border-t border-line !bg-component\",\n  },\n  variants: {\n    arrowSize: {\n      md: { arrow: \"[--arrow-size:0.5rem]\" },\n    },\n    size: {\n      sm: { content: \"p-1 text-xs\" },\n      md: { content: \"px-2 py-1 text-sm\" },\n      lg: { content: \"px-3 py-2 text-base\" },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n    arrowSize: \"md\",\n  },\n})\n\nconst { withRoot, withSlot } = createComponentFactory(tooltip)\n\nconst Root = withRoot(BaseTooltip.Root)\nconst RootProvider = withRoot(BaseTooltip.RootProvider)\nconst Context = withSlot(BaseTooltip.Context)\nconst Positioner = withSlot(BaseTooltip.Positioner)\nconst Trigger = withSlot(BaseTooltip.Trigger)\nconst Arrow = withSlot(BaseTooltip.Arrow, \"arrow\")\nconst ArrowTip = withSlot(BaseTooltip.ArrowTip, \"arrowTip\")\nconst Content = withSlot(BaseTooltip.Content, \"content\")\n\nconst CustomContent = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  React.ComponentPropsWithoutRef<typeof Content>\n>(function ({ children, ...props }, ref) {\n  return (\n    <Positioner>\n      <Content ref={ref} {...props}>\n        {children}\n      </Content>\n    </Positioner>\n  )\n})\n\nCustomContent.displayName = \"Content\"\n\nconst CustomArrow = React.forwardRef<\n  React.ElementRef<typeof Arrow>,\n  React.ComponentPropsWithoutRef<typeof Arrow>\n>(function ({ children, ...props }, ref) {\n  return (\n    <Arrow ref={ref} {...props}>\n      <ArrowTip />\n    </Arrow>\n  )\n})\n\nCustomArrow.displayName = \"Arrow\"\n\nexport interface TooltipProps extends ComposedTVProps<typeof tooltip> {}\n\nexport interface Tooltip extends ComponentMetadata {\n  (props: TooltipProps): React.ReactElement | null\n}\n\nexport const Tooltip = createComponentTree(Root, {\n  Root,\n  RootProvider,\n  Context,\n  Positioner,\n  Trigger,\n  Arrow: CustomArrow,\n  ArrowTip,\n  Content: CustomContent,\n})\n\nTooltip.displayName = \"Tooltip\"\n"
    }
  ]
}