{
  "name": "drawer.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/drawer.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui/tree/main",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "drawer.tsx",
      "content": "// onepercman-ui\n// https://github.com/onepercman/onepercman-ui\n\"use client\"\n\nimport React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport { LuX } from \"react-icons/lu\"\nimport { createComponentFactory, createComponentTree } from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\nimport { Drawer } from \"vaul\"\nimport { Button } from \"./button\"\n\nexport type DrawerProps = React.ComponentPropsWithoutRef<typeof Drawer.Root>\n\nexport const drawer = tv({\n  slots: {\n    overlay: \"fixed inset-0 bg-background/50 backdrop-blur\",\n    handle: \"bg-foreground/50\",\n    closeTrigger: \"absolute right-4 top-4 text-secondary\",\n    content: [\n      \"fixed rounded bg-component p-4\",\n      \"min-w-52 [&[vaul-drawer-direction=left]]:left-0\",\n      \"[&[vaul-drawer-direction=left]]:top-0\",\n      \"[&[vaul-drawer-direction=left]]:bottom-0\",\n      \"min-w-52 [&[vaul-drawer-direction=right]]:right-0\",\n      \"[&[vaul-drawer-direction=right]]:top-0\",\n      \"[&[vaul-drawer-direction=right]]:bottom-0\",\n      \"min-h-52 [&[vaul-drawer-direction=bottom]]:bottom-0\",\n      \"[&[vaul-drawer-direction=bottom]]:left-0\",\n      \"[&[vaul-drawer-direction=bottom]]:right-0\",\n      \"min-h-52 [&[vaul-drawer-direction=top]]:top-0\",\n      \"[&[vaul-drawer-direction=top]]:left-0\",\n      \"[&[vaul-drawer-direction=top]]:right-0\",\n    ],\n    title: \"py-2 text-sm font-medium\",\n    description: \"text-sm text-secondary\",\n  },\n})\n\nconst { withRoot, withSlot } = createComponentFactory(drawer)\n\nconst Root = withRoot(Drawer.Root)\nconst NestedRoot = withSlot(Drawer.NestedRoot)\nconst Description = withSlot(Drawer.Description, \"description\")\nconst Handle = withSlot(Drawer.Handle, \"handle\")\nconst Overlay = withSlot(Drawer.Overlay, \"overlay\")\nconst Portal = withSlot(Drawer.Portal)\nconst Title = withSlot(Drawer.Title, \"title\")\nconst Trigger = withSlot(Drawer.Trigger)\nconst Content = withSlot(Drawer.Content, \"content\")\nconst CloseTrigger = withSlot(Drawer.Close, \"closeTrigger\")\n\nconst CustomContent = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  React.ComponentPropsWithoutRef<typeof Content>\n>(function ({ children, ...props }, ref) {\n  return (\n    <Portal>\n      <Overlay />\n      <Portal>\n        <Content ref={ref} {...props}>\n          {children}\n        </Content>\n      </Portal>\n    </Portal>\n  )\n})\n\nCustomContent.displayName = \"Content\"\n\nconst CustomCloseTrigger = React.forwardRef<\n  React.ElementRef<typeof CloseTrigger>,\n  React.ComponentPropsWithoutRef<typeof CloseTrigger>\n>(function ({ children, ...props }, ref) {\n  return (\n    <CloseTrigger ref={ref} {...props}>\n      {children || <LuX className=\"h-4 w-4\" />}\n    </CloseTrigger>\n  )\n})\n\nCustomCloseTrigger.displayName = \"CloseTrigger\"\n\nexport const Component = createComponentTree(Root, {\n  Root,\n  NestedRoot,\n  Description,\n  Handle,\n  Overlay,\n  Portal,\n  Title,\n  Trigger,\n  Content: CustomContent,\n  CloseTrigger: CustomCloseTrigger,\n  open,\n  confirm,\n  dismiss,\n})\n\nComponent.displayName = \"Drawer\"\n\nfunction open({ children, onClose, ...props }: DrawerProps): {\n  close: () => void\n} {\n  const root = ReactDOM.createRoot(document.createElement(\"div\"))\n\n  function close() {\n    root.render(\n      <Drawer.Root open={false} {...props}>\n        <Drawer.Content>{children}</Drawer.Content>\n      </Drawer.Root>,\n    )\n  }\n\n  root.render(\n    <Drawer.Root\n      open={true}\n      onClose={function () {\n        close()\n        onClose?.()\n      }}\n      {...props}\n    >\n      <Drawer.Content>{children}</Drawer.Content>\n    </Drawer.Root>,\n  )\n\n  return { close }\n}\n\nfunction confirm({\n  children,\n  onConfirm,\n  onCancel,\n  ...props\n}: DrawerProps & {\n  onConfirm?: () => void\n  onCancel?: () => void\n}): {\n  close: () => void\n} {\n  const root = ReactDOM.createRoot(document.createElement(\"div\"))\n\n  function close() {\n    root.render(\n      <Drawer.Root open={false} {...props}>\n        <Drawer.Content>{children}</Drawer.Content>\n      </Drawer.Root>,\n    )\n  }\n\n  root.render(\n    <Drawer.Root\n      open={true}\n      onClose={function () {\n        close()\n        onCancel?.()\n      }}\n      {...props}\n    >\n      <Drawer.Content>\n        {children}\n        <div className=\"mt-4 flex justify-end gap-2\">\n          <Button\n            variant=\"outlined\"\n            onClick={function () {\n              close()\n              onCancel?.()\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={function () {\n              close()\n              onConfirm?.()\n            }}\n          >\n            Confirm\n          </Button>\n        </div>\n      </Drawer.Content>\n    </Drawer.Root>,\n  )\n\n  return { close }\n}\n\nfunction dismiss(id: string) {\n  document.querySelectorAll(`[data-dismiss=${id}]`).forEach(el => {\n    return (el as HTMLElement).click()\n  })\n}\n"
    }
  ]
}