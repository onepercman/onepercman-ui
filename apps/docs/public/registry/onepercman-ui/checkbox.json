{
  "name": "checkbox.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/checkbox.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui/tree/main",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "checkbox.tsx",
      "content": "// onepercman-ui\n// https://github.com/onepercman/onepercman-ui\n\"use client\"\n\nimport { Checkbox as BaseCheckbox, CheckboxRootProps } from \"@ark-ui/react\"\nimport React from \"react\"\nimport { LuMinus } from \"react-icons/lu\"\nimport {\n  ComponentMetadata,\n  ComposedTVProps,\n  createComponentFactory,\n  createComponentTree,\n} from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\nimport { Check } from \"./check\"\n\nexport const checkbox = tv({\n  base: \"inline-flex cursor-pointer items-center gap-2\",\n  slots: {\n    label: \"\",\n    control: [\n      \"flex rounded border-2 border-line text-primary transition-colors hover:border-primary\",\n      \"data-[state=checked]:border-primary\",\n    ],\n    indicator: \"m-auto\",\n  },\n  variants: {\n    size: {\n      xs: { label: \"text-xs\", control: \"h-4 w-4 text-xs\" },\n      sm: { label: \"text-sm\", control: \"h-5 w-5 text-sm\" },\n      md: { label: \"text-base\", control: \"h-6 w-6 text-base\" },\n      lg: { label: \"text-lg\", control: \"h-8 w-8 text-lg\" },\n    },\n    indeterminate: {\n      true: {\n        control:\n          \"data-[state=checked]:bg-primary data-[state=checked]:text-white\",\n      },\n    },\n    placement: {\n      head: \"flex-row\",\n      tail: \"flex-row-reverse\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n    placement: \"head\",\n    variant: \"outlined\",\n    color: \"primary\",\n  },\n})\n\nconst { withRoot, withSlot } = createComponentFactory(checkbox)\n\nconst Root = withRoot(BaseCheckbox.Root, \"base\")\nconst RootProvider = withRoot(BaseCheckbox.RootProvider, \"base\")\nconst Context = withSlot(BaseCheckbox.Context)\nconst Control = withSlot(BaseCheckbox.Control, \"control\")\nconst Group = withSlot(BaseCheckbox.Group)\nconst HiddenInput = withSlot(BaseCheckbox.HiddenInput)\nconst Indicator = withSlot(BaseCheckbox.Indicator, \"indicator\")\nconst Label = withSlot(BaseCheckbox.Label, \"label\")\n\nexport interface CheckboxProps\n  extends CheckboxRootProps,\n    ComposedTVProps<typeof checkbox> {}\n\nexport interface Checkbox extends ComponentMetadata {\n  (props: CheckboxProps): React.ReactElement | null\n}\n\nfunction _bootstrap(\n  render: (\n    props: CheckboxProps,\n    ref: React.ForwardedRef<HTMLLabelElement>,\n  ) => React.ReactElement | null,\n) {\n  return React.forwardRef<HTMLLabelElement, CheckboxProps>(render) as Checkbox\n}\n\nexport const CheckboxCustomRoot = _bootstrap(function (\n  { children, ...props },\n  ref,\n) {\n  return (\n    <Root ref={ref} {...props}>\n      <Context>\n        {({ checked }) => (\n          <>\n            <Label>{children}</Label>\n            <Control>\n              <Indicator>\n                {checked ? (\n                  props.indeterminate ? (\n                    <LuMinus strokeWidth={6} />\n                  ) : (\n                    <Check />\n                  )\n                ) : null}\n              </Indicator>\n            </Control>\n            <HiddenInput />\n          </>\n        )}\n      </Context>\n    </Root>\n  )\n})\n\nexport const Checkbox = createComponentTree(CheckboxCustomRoot, {\n  Root,\n  RootProvider,\n  Context,\n  Control,\n  Group,\n  HiddenInput,\n  Indicator,\n  Label,\n})\n\nCheckbox.displayName = \"Checkbox\"\n"
    }
  ]
}