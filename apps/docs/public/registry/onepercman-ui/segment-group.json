{
  "name": "segment-group.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/segment-group.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "segment-group.tsx",
      "content": "\"use client\"\n\nimport { SegmentGroup as BaseSegmentGroup } from \"@ark-ui/react\"\nimport React from \"react\"\nimport {\n  ComponentMetadata,\n  ComposedTVProps,\n  createComponentFactory,\n  createComponentTree,\n} from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\n\nexport const segmentGroup = tv({\n  base: \"relative inline-flex items-center gap-2\",\n  slots: {\n    item: \"relative cursor-pointer select-none text-secondary transition-colors data-[state=checked]:text-primary data-[state=checked]:[text-shadow:_0px_0px_10px_rgba(var(--tw-schemes-primary),0.50)] hover:text-foreground\",\n    indicator: \"\",\n  },\n  variants: {\n    size: {\n      sm: {\n        item: \"px-2 py-1 text-sm\",\n      },\n      md: {\n        item: \"px-4 py-2 text-base\",\n      },\n      lg: {\n        item: \"px-3 py-2 text-base\",\n      },\n    },\n    variant: {\n      solid: {\n        base: \"rounded bg-line p-1\",\n        indicator:\n          \"absolute bottom-1 left-[var(--left)] h-[var(--height)] w-[var(--width)] rounded bg-default\",\n      },\n      underlined: {\n        base: \"\",\n        indicator:\n          \"absolute bottom-0 left-[var(--left)] h-1 w-[var(--width)] rounded bg-foreground\",\n      },\n      bordered: {\n        base: \"rounded border border-line p-1\",\n        indicator:\n          \"absolute bottom-1 left-[var(--left)] h-[var(--height)] w-[var(--width)] rounded bg-default\",\n      },\n      light: {\n        base: \"\",\n        indicator:\n          \"absolute bottom-0 left-[var(--left)] h-[var(--height)] w-[var(--width)] rounded bg-default\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"solid\",\n    size: \"md\",\n  },\n})\n\nconst { withRoot, withSlot } = createComponentFactory(segmentGroup)\n\nconst Root = withRoot(BaseSegmentGroup.Root, \"base\")\nconst RootProvider = withRoot(BaseSegmentGroup.RootProvider, \"base\")\nconst Context = withSlot(BaseSegmentGroup.Context)\nconst Indicator = withSlot(BaseSegmentGroup.Indicator, \"indicator\")\nconst Item = withSlot(BaseSegmentGroup.Item, \"item\")\nconst ItemContext = withSlot(BaseSegmentGroup.ItemContext)\nconst ItemControl = withSlot(BaseSegmentGroup.ItemControl)\nconst ItemHiddenInput = withSlot(BaseSegmentGroup.ItemHiddenInput)\nconst ItemText = withSlot(BaseSegmentGroup.ItemText)\nconst Label = withSlot(BaseSegmentGroup.Label)\n\nconst CustomItem = React.forwardRef<\n  React.ElementRef<typeof Item>,\n  React.ComponentPropsWithoutRef<typeof Item>\n>(function ({ children, ...props }, ref) {\n  return (\n    <Item ref={ref} {...props}>\n      <ItemText>{children}</ItemText>\n      <ItemControl />\n      <ItemHiddenInput />\n    </Item>\n  )\n})\n\nCustomItem.displayName = \"Item\"\n\nexport interface SegmentGroupProps\n  extends ComposedTVProps<typeof segmentGroup> {}\n\nexport interface SegmentGroup extends ComponentMetadata {\n  (props: SegmentGroupProps): React.ReactElement | null\n}\n\nfunction _bootstrap(\n  render: (\n    props: React.ComponentPropsWithoutRef<typeof Root>,\n    ref: React.ForwardedRef<React.ElementRef<SegmentGroup>>,\n  ) => React.ReactElement | null,\n) {\n  return React.forwardRef<\n    React.ElementRef<SegmentGroup>,\n    React.ComponentPropsWithoutRef<typeof Root>\n  >(render) as unknown as SegmentGroup\n}\n\nconst CustomRoot = _bootstrap(function ({ children, ...props }, ref) {\n  return (\n    <Root ref={ref} {...props}>\n      <Indicator />\n      {children}\n    </Root>\n  )\n})\n\nexport const SegmentGroup = createComponentTree(CustomRoot, {\n  Root,\n  RootProvider,\n  Context,\n  Indicator,\n  Item: CustomItem,\n  ItemContext,\n  ItemControl,\n  ItemHiddenInput,\n  ItemText,\n  Label,\n})\n\nSegmentGroup.displayName = \"SegmentGroup\"\n"
    }
  ]
}