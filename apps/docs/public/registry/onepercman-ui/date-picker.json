{
  "name": "date-picker.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/date-picker.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui/tree/main",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "date-picker.tsx",
      "content": "// onepercman-ui\n// https://github.com/onepercman/onepercman-ui\n\"use client\"\n\nimport {\n  DatePicker as BaseDatePicker,\n  DatePickerRootProps,\n} from \"@ark-ui/react\"\nimport React, { Fragment } from \"react\"\nimport { LuChevronLeft, LuChevronRight } from \"react-icons/lu\"\nimport {\n  ComponentMetadata,\n  ComposedTVProps,\n  createComponentFactory,\n  createComponentTree,\n} from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\nimport { Button } from \"./button\"\n\nexport const datePicker = tv({\n  slots: {\n    content: [\n      \"w-fit rounded border border-line bg-component p-2 shadow\",\n      \"data-[state=open]:animate-in\",\n      \"data-[state=open]:fade-in\",\n      \"data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out\",\n    ],\n    control: \"inline-flex items-center gap-2\",\n    trigger: \"inline-flex items-center gap-2\",\n    viewControl: \"inline-flex w-full items-center justify-between gap-2 py-2\",\n    table: \"border-separate border-spacing-1\",\n    tableHeader: \"text-xs font-normal text-secondary\",\n    tableCellTrigger: [\n      \"relative inline-flex w-full items-center justify-center rounded px-2 py-1.5 text-xs font-normal\",\n      \"hover:bg-primary/20\",\n      \"data-[in-range]:bg-primary/50\",\n      \"data-[selected]:bg-primary\",\n      \"data-[selected]:hover:bg-primary\",\n      \"data-[disabled]:text-muted\",\n      \"data-[today]:after:content-['']\",\n      \"data-[today]:after:absolute\",\n      \"data-[today]:after:bottom-0\",\n      \"data-[today]:after:w-1\",\n      \"data-[today]:after:h-1\",\n      \"data-[today]:after:rounded-full\",\n      \"data-[today]:after:bg-primary\",\n    ],\n  },\n  variants: {},\n  defaultVariants: {},\n})\n\nconst { withRoot, withSlot } = createComponentFactory(datePicker)\n\nconst Root = withRoot(BaseDatePicker.Root)\nconst RootProvider = withRoot(BaseDatePicker.RootProvider)\nconst ClearTrigger = withSlot(BaseDatePicker.ClearTrigger)\nconst Content = withSlot(BaseDatePicker.Content, \"content\")\nconst Context = withSlot(BaseDatePicker.Context)\nconst Control = withSlot(BaseDatePicker.Control, \"control\")\nconst Input = withSlot(BaseDatePicker.Input)\nconst Label = withSlot(BaseDatePicker.Label)\nconst MonthSelect = withSlot(BaseDatePicker.MonthSelect)\nconst NextTrigger = withSlot(BaseDatePicker.NextTrigger)\nconst Positioner = withSlot(BaseDatePicker.Positioner)\nconst PresetTrigger = withSlot(BaseDatePicker.PresetTrigger)\nconst PrevTrigger = withSlot(BaseDatePicker.PrevTrigger)\nconst RangeText = withSlot(BaseDatePicker.RangeText)\nconst Table = withSlot(BaseDatePicker.Table, \"table\")\nconst TableBody = withSlot(BaseDatePicker.TableBody)\nconst TableCell = withSlot(BaseDatePicker.TableCell)\nconst TableCellTrigger = withSlot(\n  BaseDatePicker.TableCellTrigger,\n  \"tableCellTrigger\",\n)\nconst TableHead = withSlot(BaseDatePicker.TableHead)\nconst TableHeader = withSlot(BaseDatePicker.TableHeader, \"tableHeader\")\nconst TableRow = withSlot(BaseDatePicker.TableRow)\nconst Trigger = withSlot(BaseDatePicker.Trigger, \"trigger\")\nconst View = withSlot(BaseDatePicker.View)\nconst ViewControl = withSlot(BaseDatePicker.ViewControl, \"viewControl\")\nconst ViewTrigger = withSlot(BaseDatePicker.ViewTrigger)\nconst YearSelect = withSlot(BaseDatePicker.YearSelect)\n\nexport interface DatePickerCompactProps\n  extends DatePickerRootProps,\n    ComposedTVProps<typeof datePicker> {}\n\nexport interface DatePicker extends ComponentMetadata {\n  (props: DatePickerCompactProps): React.ReactElement | null\n}\n\nfunction _bootstrap(\n  render: (\n    props: DatePickerCompactProps,\n    ref: React.ForwardedRef<HTMLDivElement>,\n  ) => React.ReactElement | null,\n) {\n  return React.forwardRef<HTMLDivElement, DatePickerCompactProps>(\n    render,\n  ) as unknown as DatePicker\n}\n\nconst CustomRoot = _bootstrap(function (\n  { children, positioning, ...props },\n  ref,\n) {\n  return (\n    <Root\n      ref={ref}\n      asChild\n      positioning={{ placement: \"bottom-end\", ...positioning }}\n      {...props}\n    >\n      <Fragment>{children}</Fragment>\n    </Root>\n  )\n})\n\nconst CustomContent = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  React.ComponentPropsWithoutRef<typeof Content>\n>(function ({ ...props }, ref) {\n  return (\n    <Positioner>\n      <Content ref={ref} {...props} />\n    </Positioner>\n  )\n})\n\nCustomContent.displayName = \"Content\"\n\nconst SimpleViews = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  React.ComponentPropsWithoutRef<typeof Content>\n>(function () {\n  return (\n    <>\n      {/* VIEW DAY */}\n      <View view=\"day\">\n        <Context>\n          {datePicker => (\n            <>\n              <ViewControl>\n                <PrevTrigger asChild>\n                  <Button leftIcon={<LuChevronLeft />} />\n                </PrevTrigger>\n                <ViewTrigger asChild>\n                  <Button>\n                    <RangeText />\n                  </Button>\n                </ViewTrigger>\n                <NextTrigger asChild>\n                  <Button leftIcon={<LuChevronRight />} />\n                </NextTrigger>\n              </ViewControl>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    {datePicker.weekDays.map((weekDay, id) => (\n                      <TableHeader key={id}>{weekDay.narrow}</TableHeader>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {datePicker.weeks.map((week, id) => (\n                    <TableRow key={id}>\n                      {week.map((day, id) => (\n                        <TableCell key={id} value={day}>\n                          <TableCellTrigger>{day.day}</TableCellTrigger>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </>\n          )}\n        </Context>\n      </View>\n      {/* VIEW MONTH */}\n      <View view=\"month\">\n        <Context>\n          {datePicker => (\n            <>\n              <ViewControl>\n                <PrevTrigger asChild>\n                  <Button leftIcon={<LuChevronLeft />} />\n                </PrevTrigger>\n                <ViewTrigger asChild>\n                  <Button>\n                    <RangeText />\n                  </Button>\n                </ViewTrigger>\n                <NextTrigger asChild>\n                  <Button leftIcon={<LuChevronRight />} />\n                </NextTrigger>\n              </ViewControl>\n              <Table>\n                <TableBody>\n                  {datePicker\n                    .getMonthsGrid({ columns: 4, format: \"short\" })\n                    .map((months, id) => (\n                      <TableRow key={id}>\n                        {months.map((month, id) => (\n                          <TableCell key={id} value={month.value}>\n                            <TableCellTrigger>{month.label}</TableCellTrigger>\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n            </>\n          )}\n        </Context>\n      </View>\n      {/* VIEW YEAR */}\n      <View view=\"year\">\n        <Context>\n          {datePicker => (\n            <>\n              <ViewControl>\n                <PrevTrigger asChild>\n                  <Button leftIcon={<LuChevronLeft />} />\n                </PrevTrigger>\n                <ViewTrigger asChild>\n                  <Button>\n                    <RangeText />\n                  </Button>\n                </ViewTrigger>\n                <NextTrigger asChild>\n                  <Button leftIcon={<LuChevronRight />} />\n                </NextTrigger>\n              </ViewControl>\n              <Table>\n                <TableBody>\n                  {datePicker.getYearsGrid({ columns: 4 }).map((years, id) => (\n                    <TableRow key={id}>\n                      {years.map((year, id) => (\n                        <TableCell key={id} value={year.value}>\n                          <TableCellTrigger>{year.label}</TableCellTrigger>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </>\n          )}\n        </Context>\n      </View>\n    </>\n  )\n})\n\nSimpleViews.displayName = \"SimpleViews\"\n\nexport const DatePicker = createComponentTree(CustomRoot, {\n  Root,\n  RootProvider,\n  ClearTrigger,\n  Content: CustomContent,\n  Context,\n  Control,\n  Input,\n  Label,\n  MonthSelect,\n  NextTrigger,\n  Positioner,\n  PresetTrigger,\n  PrevTrigger,\n  RangeText,\n  Table,\n  TableBody,\n  TableCell,\n  TableCellTrigger,\n  TableHead,\n  TableHeader,\n  TableRow,\n  Trigger,\n  View,\n  ViewControl,\n  ViewTrigger,\n  YearSelect,\n  SimpleViews,\n})\n\nDatePicker.displayName = \"DatePicker\"\n"
    }
  ]
}