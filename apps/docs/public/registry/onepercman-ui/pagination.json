{
  "name": "pagination.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/pagination.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui/tree/main",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "pagination.tsx",
      "content": "// onepercman-ui\n// https://github.com/onepercman/onepercman-ui\n\"use client\"\n\nimport {\n  Pagination as BasePagination,\n  PaginationRootProps,\n  UsePaginationContext,\n} from \"@ark-ui/react\"\nimport React from \"react\"\nimport { LuChevronLeft, LuChevronRight } from \"react-icons/lu\"\nimport { cn, ComponentMetadata, ComposedTVProps } from \"react-tvcx\"\nimport { button, Button, ButtonProps } from \"./button\"\n\nexport interface PaginationProps\n  extends Omit<PaginationRootProps, \"color\">,\n    ComposedTVProps<typeof button> {\n  activeProps?: ButtonProps\n  inactiveProps?: ButtonProps\n}\n\ninterface Pagination extends ComponentMetadata {\n  (props: PaginationProps): React.ReactElement | null\n}\n\nfunction _bootstrap(\n  render: (\n    props: PaginationProps,\n    ref: React.ForwardedRef<HTMLDivElement>,\n  ) => React.ReactElement | null,\n) {\n  return React.forwardRef<HTMLDivElement, PaginationProps>(\n    render,\n  ) as unknown as Pagination\n}\n\nexport const Pagination = _bootstrap(function (\n  {\n    className,\n    size,\n    variant,\n    color,\n    activeProps = { color: \"primary\" },\n    inactiveProps,\n    ...props\n  },\n  ref,\n) {\n  return (\n    <BasePagination.Root\n      ref={ref}\n      className={cn(\"inline-flex items-center gap-2\", className)}\n      {...props}\n    >\n      <BasePagination.PrevTrigger asChild>\n        <Button\n          size={size}\n          variant={variant}\n          color={color}\n          leftIcon={<LuChevronLeft />}\n        />\n      </BasePagination.PrevTrigger>\n\n      <BasePagination.Context>\n        {(pagination: UsePaginationContext) =>\n          pagination.pages.map((page, index) =>\n            page.type === \"page\" ? (\n              <BasePagination.Item asChild key={index} value={page.value}>\n                <Button\n                  size={size}\n                  variant={variant}\n                  color={color}\n                  {...(pagination.page === page.value\n                    ? activeProps\n                    : inactiveProps)}\n                >\n                  {page.value}\n                </Button>\n              </BasePagination.Item>\n            ) : (\n              <BasePagination.Ellipsis asChild key={index} index={index}>\n                <Button\n                  size={size}\n                  variant={variant}\n                  color={color}\n                  className=\"pointer-events-none\"\n                >\n                  &#8230;\n                </Button>\n              </BasePagination.Ellipsis>\n            ),\n          )\n        }\n      </BasePagination.Context>\n\n      <BasePagination.NextTrigger asChild>\n        <Button\n          size={size}\n          variant={variant}\n          color={color}\n          leftIcon={<LuChevronRight />}\n        />\n      </BasePagination.NextTrigger>\n    </BasePagination.Root>\n  )\n})\n\nPagination.displayName = \"Pagination\"\n"
    }
  ]
}