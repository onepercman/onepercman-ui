{
  "name": "menu.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/menu.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui/tree/main",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "menu.tsx",
      "content": "// onepercman-ui\n// https://github.com/onepercman/onepercman-ui\n\"use client\"\n\nimport { Menu as BaseMenu } from \"@ark-ui/react\"\nimport React from \"react\"\nimport {\n  ComponentMetadata,\n  ComposedTVProps,\n  createComponentFactory,\n  createComponentTree,\n} from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\n\nexport const menu = tv({\n  slots: {\n    content: [\n      \"flex w-full flex-col overflow-hidden rounded bg-component p-2 shadow-lg outline-none\",\n      \"data-[state=open]:animate-in\",\n      \"data-[state=open]:fade-in\",\n      \"data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out\",\n    ],\n    itemGroup: \"flex flex-col\",\n    itemGroupLabel: \"w-full px-2 py-1 text-xs text-secondary\",\n    item: \"relative inline-flex cursor-pointer items-center justify-between gap-2 rounded px-3 py-2 font-medium hover:bg-foreground/5\",\n    itemIndicator: [\n      \"absolute right-2 top-0 h-full items-center\",\n      \"data-[state=checked]:flex\",\n    ],\n    separator: \"my-1 h-px w-full border-line\",\n  },\n  variants: {\n    size: {\n      xs: { item: \"py-1 text-xs\" },\n      sm: { item: \"py-1 text-sm\" },\n      md: { item: \"text-sm\" },\n      lg: { item: \"text-lg\" },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n})\n\nconst { withRoot, withSlot } = createComponentFactory(menu)\n\nconst Root = withRoot(BaseMenu.Root)\nconst RootProvider = withRoot(BaseMenu.RootProvider)\nconst Arrow = withSlot(BaseMenu.Arrow)\nconst ArrowTip = withSlot(BaseMenu.ArrowTip)\nconst CheckboxItem = withSlot(BaseMenu.CheckboxItem)\nconst Context = withSlot(BaseMenu.Context)\nconst ContextTrigger = withSlot(BaseMenu.ContextTrigger)\nconst Indicator = withSlot(BaseMenu.Indicator)\nconst Item = withSlot(BaseMenu.Item, \"item\")\nconst ItemContext = withSlot(BaseMenu.ItemContext)\nconst ItemGroup = withSlot(BaseMenu.ItemGroup, \"itemGroup\")\nconst ItemGroupLabel = withSlot(BaseMenu.ItemGroupLabel, \"itemGroupLabel\")\nconst ItemIndicator = withSlot(BaseMenu.ItemIndicator, \"itemIndicator\")\nconst ItemText = withSlot(BaseMenu.ItemText)\nconst Positioner = withSlot(BaseMenu.Positioner)\nconst RadioItem = withSlot(BaseMenu.RadioItem, \"item\")\nconst RadioItemGroup = withSlot(BaseMenu.RadioItemGroup, \"itemGroup\")\nconst Separator = withSlot(BaseMenu.Separator, \"separator\")\nconst Trigger = withSlot(BaseMenu.Trigger)\nconst TriggerItem = withSlot(BaseMenu.TriggerItem)\nconst Content = withSlot(BaseMenu.Content, \"content\")\n\nconst CustomContent = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  React.ComponentPropsWithoutRef<typeof Content>\n>(function ({ children, ...props }, ref) {\n  return (\n    <Positioner>\n      <Content ref={ref} {...props}>\n        {children}\n      </Content>\n    </Positioner>\n  )\n})\n\nCustomContent.displayName = \"Content\"\n\nexport interface MenuProps extends ComposedTVProps<typeof menu> {}\n\nexport interface Menu extends ComponentMetadata {\n  (props: MenuProps): React.ReactElement | null\n}\n\nexport const Menu = createComponentTree(Root, {\n  Root,\n  RootProvider,\n  Arrow,\n  ArrowTip,\n  CheckboxItem,\n  Context,\n  ContextTrigger,\n  Indicator,\n  Item,\n  ItemContext,\n  ItemGroup,\n  ItemGroupLabel,\n  ItemIndicator,\n  ItemText,\n  Positioner,\n  RadioItem,\n  RadioItemGroup,\n  Separator,\n  Trigger,\n  TriggerItem,\n  Content: CustomContent,\n})\n\nMenu.displayName = \"Menu\"\n"
    }
  ]
}