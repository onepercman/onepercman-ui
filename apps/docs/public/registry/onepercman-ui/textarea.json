{
  "name": "textarea.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/textarea.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui/tree/main",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "textarea.tsx",
      "content": "// onepercman-ui\n// https://github.com/onepercman/onepercman-ui\n\"use client\"\n\nimport React from \"react\"\nimport { LuX } from \"react-icons/lu\"\nimport TextAreaAutoSize, {\n  TextareaAutosizeProps,\n} from \"react-textarea-autosize\"\nimport { cn, ComposedTVProps, forwardRef } from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\nimport { useComposedRefs } from \"use-composed-refs\"\n\nexport const textarea = tv({\n  base: [\n    \"inline-flex cursor-text items-center gap-2 overflow-hidden text-ellipsis rounded border-2 px-2 py-2 transition-all\",\n    \"focus-within:border-primary\",\n  ],\n  slots: {\n    textarea: [\n      \"my-auto h-fit grow self-stretch text-ellipsis border-transparent bg-transparent p-0\",\n      \"focus:outline-none focus:ring-transparent\",\n    ],\n    addonBefore: \"rounded-r-none\",\n    addonAfter: \"rounded-l-none\",\n  },\n  variants: {\n    size: {\n      xs: \"min-h-[1.5rem] min-w-[1.5rem] px-2 text-xs\",\n      sm: \"min-h-[2rem] min-w-[2rem] px-2 text-sm\",\n      md: \"min-h-[2.5rem] min-w-[2.5rem] px-2\",\n      lg: \"min-h-[3rem] min-w-[3rem] px-4\",\n    },\n    variant: {\n      filled: \"border-transparent bg-default\",\n      outlined: \"border-2 border-line\",\n    },\n    invalid: {\n      true: {\n        base: \"border-2 border-error bg-error/10 text-error focus-within:border-error-600\",\n        label: \"text-error\",\n      },\n    },\n    autoSize: {\n      true: { textarea: \"resize-none\" },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n    variant: \"filled\",\n  },\n})\n\nexport interface TextareaProps<AutoSize extends boolean = true>\n  extends ComposedTVProps<typeof textarea> {\n  autoSize?: AutoSize\n  prefix?: React.ReactNode | React.ReactElement\n  suffix?: React.ReactNode | React.ReactElement\n  addonBefore?: React.ReactNode | React.ReactElement\n  addonAfter?: React.ReactNode | React.ReactElement\n  clearable?: boolean\n  transform?(value: string): string\n  autoSizeOptions?: AutoSize extends true ? TextareaAutosizeProps : undefined\n}\n\nexport const Textarea = forwardRef<\"textarea\", TextareaProps>(\n  (\n    {\n      as: Comp = \"textarea\",\n      prefix,\n      suffix,\n      addonBefore,\n      addonAfter,\n      variant,\n      size,\n      invalid,\n      clearable,\n      autoSize,\n      autoSizeOptions,\n      onChange,\n      transform,\n      className,\n      classNames,\n      ...props\n    },\n    ref,\n  ) => {\n    const styles = textarea({ variant, size, invalid, className })\n\n    const internalRef = React.useRef<HTMLTextAreaElement>(null)\n    const composedRef = useComposedRefs(ref, internalRef)\n\n    const [showClear, setShowClear] = React.useState(false)\n\n    function getClear() {\n      if (showClear && clearable) {\n        return (\n          <LuX\n            className=\"cursor-pointer text-secondary\"\n            onClick={function () {\n              if (internalRef.current) {\n                setShowClear(false)\n                internalRef.current.value = \"\"\n                const currentTarget = internalRef.current.cloneNode(true)\n                const event = Object.create(new Event(\"change\"), {\n                  target: { value: currentTarget },\n                  currentTarget: { value: currentTarget },\n                })\n                if (onChange) onChange(event)\n              }\n            }}\n          />\n        )\n      }\n    }\n\n    function handleChange(ev: React.ChangeEvent<HTMLTextAreaElement>) {\n      if (transform && internalRef.current) {\n        internalRef.current.value = transform(internalRef.current.value)\n      }\n      if (onChange) onChange(ev)\n      setShowClear(!!ev.target.value)\n    }\n\n    function _renderPrefix() {\n      const element = prefix as React.ReactElement\n      if (!element) return null\n\n      if (typeof element === \"object\" && \"type\" in element)\n        return React.cloneElement(element)\n      return <span>{element}</span>\n    }\n\n    function _renderSuffix() {\n      const element = suffix as React.ReactElement\n      if (!element) return null\n      if (typeof element === \"object\" && \"type\" in element)\n        return React.cloneElement(element)\n      return <span>{element}</span>\n    }\n\n    function _renderAddonBefore() {\n      const element = addonBefore as React.ReactElement\n      if (!element) return null\n      if (typeof element === \"object\" && \"type\" in element)\n        return React.cloneElement(element, {\n          className: styles.addonBefore({\n            className: element.props.className,\n            class: classNames?.addonBefore,\n          }),\n        })\n      return (\n        <span\n          className={styles.addonBefore({ class: classNames?.addonBefore })}\n        >\n          {element}\n        </span>\n      )\n    }\n\n    function _renderAddonAfter() {\n      const element = addonAfter as React.ReactElement\n      if (!element) return null\n      if (typeof element === \"object\" && \"type\" in element)\n        return React.cloneElement(element, {\n          className: styles.addonAfter({\n            className: element.props.className,\n            class: classNames?.addonAfter,\n          }),\n        })\n      return (\n        <span className={styles.addonAfter({ class: classNames?.addonAfter })}>\n          {element}\n        </span>\n      )\n    }\n\n    const Component = autoSize ? TextAreaAutoSize : (Comp as any)\n\n    return (\n      <label\n        role=\"input\"\n        className={styles.base({\n          className: cn(className, classNames?.base, {\n            \"pl-0\": addonBefore,\n            \"pr-0\": addonAfter,\n          }),\n        })}\n      >\n        {_renderAddonBefore()}\n        {_renderPrefix()}\n        <Component\n          ref={composedRef}\n          onChange={handleChange}\n          className={styles.textarea({\n            autoSize,\n            class: classNames?.textarea,\n          })}\n          {...props}\n          {...autoSizeOptions}\n        />\n        {getClear()}\n        {_renderSuffix()}\n        {_renderAddonAfter()}\n      </label>\n    )\n  },\n)\n\nTextarea.displayName = \"Textarea\"\n"
    }
  ]
}