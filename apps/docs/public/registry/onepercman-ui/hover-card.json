{
  "name": "hover-card.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/hover-card.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "hover-card.tsx",
      "content": "\"use client\"\n\nimport { HoverCard as BaseHoverCard } from \"@ark-ui/react\"\nimport React from \"react\"\nimport {\n  ComponentMetadata,\n  ComposedTVProps,\n  createComponentFactory,\n  createComponentTree,\n} from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\n\nexport const hoverCard = tv({\n  slots: {\n    content: [\n      \"[--arrow-size]:[6px]\",\n      \"[--arrow-offset]:[-3px]\",\n      \"z-[var(--z-index)] rounded border border-line bg-component px-3 py-2 shadow-lg\",\n      \"data-[state=open]:animate-in\",\n      \"data-[state=open]:fade-in\",\n      \"data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out\",\n    ],\n    arrowTip: \"border-l border-t border-line !bg-component\",\n  },\n  variants: {\n    size: {\n      sm: { content: \"p-1 text-xs\" },\n      md: { content: \"px-2 py-1 text-sm\" },\n      lg: { content: \"px-3 py-2 text-base\" },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n})\n\nconst { withRoot, withSlot } = createComponentFactory(hoverCard)\n\nconst Root = withRoot(BaseHoverCard.Root)\nconst RootProvider = withRoot(BaseHoverCard.RootProvider)\nconst Context = withSlot(BaseHoverCard.Context)\nconst Positioner = withSlot(BaseHoverCard.Positioner)\nconst Trigger = withSlot(BaseHoverCard.Trigger)\nconst Arrow = withSlot(BaseHoverCard.Arrow)\nconst ArrowTip = withSlot(BaseHoverCard.ArrowTip, \"arrowTip\")\nconst Content = withSlot(BaseHoverCard.Content, \"content\")\n\nconst CustomContent = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  React.ComponentPropsWithoutRef<typeof Content>\n>(function ({ children, ...props }, ref) {\n  return (\n    <Positioner>\n      <Content ref={ref} {...props}>\n        {children}\n      </Content>\n    </Positioner>\n  )\n})\n\nCustomContent.displayName = \"Content\"\n\nconst CustomArrow = React.forwardRef<\n  React.ElementRef<typeof Arrow>,\n  React.ComponentPropsWithoutRef<typeof Arrow>\n>(function ({ children, ...props }, ref) {\n  return (\n    <Arrow ref={ref} {...props}>\n      <ArrowTip />\n    </Arrow>\n  )\n})\n\nCustomArrow.displayName = \"Arrow\"\n\nexport interface HoverCardProps extends ComposedTVProps<typeof hoverCard> {}\n\nexport interface HoverCard extends ComponentMetadata {\n  (props: HoverCardProps): React.ReactElement | null\n}\n\nexport const HoverCard = createComponentTree(Root, {\n  Root,\n  RootProvider,\n  Context,\n  Positioner,\n  Trigger,\n  Arrow: CustomArrow,\n  ArrowTip,\n  Content: CustomContent,\n})\n\nHoverCard.displayName = \"HoverCard\"\n"
    }
  ]
}