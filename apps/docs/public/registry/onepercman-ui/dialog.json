{
  "name": "dialog.tsx",
  "meta": {
    "name": "onepercman-ui",
    "source": "https://github.com/onepercman/onepercman-ui/blob/main/packages/ui/src/dialog.tsx",
    "description": "",
    "license": "https://github.com/onepercman/onepercman-ui",
    "tags": [
      "ui"
    ]
  },
  "files": [
    {
      "name": "dialog.tsx",
      "content": "\"use client\"\n\nimport { Dialog as BaseDialog, DialogRootProps } from \"@ark-ui/react\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport { LuX } from \"react-icons/lu\"\nimport {\n  ComponentMetadata,\n  ComposedTVProps,\n  createComponentFactory,\n  createComponentTree,\n} from \"react-tvcx\"\nimport { tv } from \"tailwind-variants\"\nimport { Button } from \"./button\"\n\nexport const dialog = tv({\n  slots: {\n    backdrop: [\n      \"fixed inset-0 bg-background/80\",\n      \"data-[state=open]:animate-in\",\n      \"data-[state=open]:fade-in\",\n      \"data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out\",\n    ],\n    positioner: \"fixed inset-0 flex overflow-auto p-4\",\n    content: [\n      \"relative h-fit w-fit rounded border border-line bg-component p-4 shadow\",\n      \"data-[state=open]:animate-in\",\n      \"data-[state=open]:fade-in\",\n      \"data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out\",\n    ],\n    title: \"pb-4 text-sm font-medium\",\n    closeTrigger: \"absolute right-4 top-3\",\n    description: \"\",\n  },\n  variants: {\n    size: {\n      sm: { content: \"min-w-[340px]\" },\n      md: { content: \"min-w-[640px]\" },\n      lg: { content: \"min-w-[768px]\" },\n    },\n    placement: {\n      center: { content: \"m-auto\" },\n      topCenter: { content: \"mx-auto mt-24\" },\n      left: { content: \"mr-auto h-full\" },\n      right: { content: \"ml-auto h-full\" },\n    },\n    scrollBehavior: {\n      inside: \"\",\n      outside: \"\",\n    },\n  },\n  defaultVariants: {\n    size: \"sm\",\n    placement: \"topCenter\",\n  },\n})\n\nconst { withRoot, withSlot } = createComponentFactory(dialog)\n\nconst Root = withRoot(BaseDialog.Root)\nconst RootProvider = withSlot(BaseDialog.RootProvider)\nconst Backdrop = withSlot(BaseDialog.Backdrop, \"backdrop\")\nconst Context = withSlot(BaseDialog.Context)\nconst Description = withSlot(BaseDialog.Description, \"description\")\nconst Positioner = withSlot(BaseDialog.Positioner, \"positioner\")\nconst Title = withSlot(BaseDialog.Title, \"title\")\nconst Trigger = withSlot(BaseDialog.Trigger)\nconst Content = withSlot(BaseDialog.Content, \"content\")\nconst CloseTrigger = withSlot(BaseDialog.CloseTrigger, \"closeTrigger\")\n\nconst CustomContent = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  React.ComponentPropsWithoutRef<typeof Content>\n>(function ({ children, ...props }, ref) {\n  return (\n    <>\n      <Backdrop />\n      <Positioner>\n        <Content ref={ref} {...props}>\n          {children}\n        </Content>\n      </Positioner>\n    </>\n  )\n})\n\nCustomContent.displayName = \"Content\"\n\nconst CustomCloseTrigger = React.forwardRef<\n  React.ElementRef<typeof CloseTrigger>,\n  React.ComponentPropsWithoutRef<typeof CloseTrigger>\n>(function ({ children, ...props }, ref) {\n  return (\n    <CloseTrigger ref={ref} asChild {...props}>\n      <LuX role=\"button\" className=\"text-secondary\" />\n    </CloseTrigger>\n  )\n})\n\nCustomCloseTrigger.displayName = \"CloseTrigger\"\n\nfunction open({ children, onOpenChange, ...props }: DialogRootProps): {\n  close(): void\n} {\n  const container = document.createDocumentFragment()\n\n  const root = ReactDOM.createRoot(container)\n\n  function close() {\n    root.render(\n      <Root open={false} unmountOnExit {...props}>\n        <Content>{children}</Content>\n      </Root>,\n    )\n  }\n\n  root.render(\n    <Root\n      open={true}\n      onOpenChange={function (details) {\n        if (onOpenChange) {\n          onOpenChange(details)\n        }\n        close()\n      }}\n      {...props}\n    >\n      <Content>{children}</Content>\n    </Root>,\n  )\n\n  return {\n    close,\n  }\n}\n\nasync function confirm({\n  question,\n  confirmProps,\n  cancelProps,\n  ...props\n}: DialogRootProps & {\n  question?: React.ReactNode\n  confirmProps?: React.ComponentPropsWithoutRef<typeof Button>\n  cancelProps?: React.ComponentPropsWithoutRef<typeof Button>\n}) {\n  return new Promise(function (resolve) {\n    open({\n      onOpenChange({ open }) {\n        if (!open) {\n          resolve(false)\n        }\n      },\n      children: (\n        <Context>\n          {({ setOpen }) => (\n            <div className=\"space-y-4\">\n              <div className=\"text-low text-sm\">{question}</div>\n              <div className=\"flex items-center justify-end gap-2\">\n                <Button\n                  size=\"sm\"\n                  {...cancelProps}\n                  onClick={async function (e) {\n                    if (\n                      cancelProps?.onClick?.constructor.name === \"AsyncFunction\"\n                    ) {\n                      await cancelProps?.onClick(e)\n                    } else if (cancelProps?.onClick) {\n                      cancelProps?.onClick(e)\n                    }\n                    setOpen(false)\n                    resolve(false)\n                  }}\n                >\n                  {cancelProps?.children || \"Cancel\"}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  color=\"primary\"\n                  {...confirmProps}\n                  onClick={async function (e) {\n                    if (\n                      confirmProps?.onClick?.constructor.name ===\n                      \"AsyncFunction\"\n                    ) {\n                      await confirmProps?.onClick(e)\n                    } else if (confirmProps?.onClick) {\n                      confirmProps?.onClick(e)\n                    }\n                    resolve(true)\n                    setOpen(false)\n                  }}\n                >\n                  {confirmProps?.children || \"Confirm\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </Context>\n      ),\n      ...props,\n    })\n  })\n}\n\nexport interface DialogProps\n  extends DialogRootProps,\n    ComposedTVProps<typeof dialog> {}\n\nexport interface Dialog extends ComponentMetadata {\n  (props: DialogProps): React.ReactElement | null\n}\n\nexport const Dialog = createComponentTree(Root, {\n  Root,\n  RootProvider,\n  Backdrop,\n  Context,\n  Description,\n  Positioner,\n  Title,\n  Trigger,\n  Content: CustomContent,\n  CloseTrigger: CustomCloseTrigger,\n  open,\n  confirm,\n})\n\nDialog.displayName = \"Dialog\"\n"
    }
  ]
}